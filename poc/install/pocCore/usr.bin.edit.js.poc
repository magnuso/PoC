<?PHP

/*******************************************************************************

PoC Web-Application-Framwork
http://poc-online.net/

Copyright (c) 2013, PoC - Marcus Grundschok
Released under the MIT license
http://poc-online.net/license

-- pocPackage: pocCore
-- pocPath: usr/bin/edit/js
-- pocUser: admin
-- pocGroup: user
-- pocPrivileges: rosiud ros--- ------
-- pocTitle: PoC-Edit

*******************************************************************************/

$thePoc = array_shift($params);

?>

// tabs in editPoc

function pocSwitchTab(tabId, buttonId) {
  $( ".switchedDiv" ).hide();
  $( ".tabButton" ).removeClass("here");
  $( "#" + tabId ).show();
  $( "#" + buttonId ).addClass("here");
  document.cookie = "pocRememberTab=" + tabId + ":" + buttonId;
  return false;
}

// main form validation

function pocModeChanged() {
  $( "#pocMode" ).val(parseInt(0));
  $( ".modeBox" ).each (
    function(index) {
      if($( this ).prop("checked"))
        $( "#pocMode" ).val(0 + parseInt($( "#pocMode" ).val()) + parseInt($( this ).val()));
    }
  )
  pocCheckDirty();
}

function pocCheckDirty() {
  document.pocIsDirty = false;
  if ($( "#saveButton" ).length > 0) {
    $( "#saveButton" ).prop("disabled", true);
    $( ".pocInput" ).each(
      function(index) {
        if(this.pocCheckDirty()) {
          document.pocIsDirty = true;
          $( "#saveButton" ).prop("disabled", false);
          $( this ).addClass("changed");
        } else {
          $( this ).removeClass("changed");
        }
      }
    )
  }
  if (document.pocCKactive) {
    if (CKEDITOR.instances.contentArea.checkDirty()) {
      $( "#saveButton" ).prop("disabled", false);
      document.pocIsDirty = true;
    }
  }
  return document.pocIsDirty;
}

function pocCheckSelection() {
  $( ".selectionFunction" ).prop("disabled", true);
  if ($( ".selection:checked" ).length)
    $( ".selectionFunction" ).prop("disabled", false);
}

function pocSelectionToText() {
  var selection = $( ".selection:checked" );
  if (selection.length < 1)
    return;
  if (selection.length > 3) {
    return $( selection[0] ).val() + "<br />\n" + $( selection[1] ).val() + "<br />\n..." 
  } else {
    return selection.map( function() { return $( this ).val(); } ).get().join("<br />\n");
  }
}

// onclick handler for save button (main form)

function pocSaveChanges() {
  document.pocIsDirty = false;
  document.pocPostData = { "action" : "update" };
  $( ".pocInput" ).each(function() {
      if(this.pocCheckDirty())
        $( document.pocPostData ).prop(this.name, $( this ).val());
    }
  )
  if (document.pocCKactive) {
    if (CKEDITOR.instances.contentArea.checkDirty())
      document.pocPostData["<?PHP echo $thePoc->identifier; ?>"] = CKEDITOR.instances.contentArea.getData();
  }
  $.post("<?PHP $u = new pocPath('./ajax'); echo $u->url; ?>", document.pocPostData,
    function(data) {
      if(data)
        alert(data);
      window.location.href = "<?PHP $u = new pocPath('.', array("poc" => $thePoc->path)); echo $u->url; ?>";
    }
  );
}

// onclick handler for delete button (main form)

function pocDeletePocs() {
  if (document.pocIsDirty) {
    if(confirm("Ungesicherte Änderungen!\nWollen Sie die Seite verlassen und die Änderungen verlieren?") == false)
      return false;
  }
  $( "#overlay" ).show();
  if(confirm("Wollen Sie die ausgewählten PoCs wirklich löschen?") == false) {
    $( "#overlay" ).hide();
    return false;
  }
  $( "html" ).css("cursor: wait");
  document.pocPostData = {
    action: "delete",
    selection: new Array()
  };
  $( ".selection:checked" ).each( function() { document.pocPostData.selection.push($( this ).val()); } );
  $.post("<?PHP $u = new pocPath('./ajax'); echo $u->url; ?>", document.pocPostData,
    function(data) {
      if(data)
        alert(data);
      window.location.href = "<?PHP $u = new pocPath('.', array("poc" => $thePoc->path)); echo $u->url; ?>";
    }
  );
}

// onclick handler for delete attribute button (main form)

function pocDeleteAttributes() {
  if (document.pocIsDirty) {
    if(confirm("Ungesicherte Änderungen!\nWollen Sie die Seite verlassen und die Änderungen verlieren?") == false)
      return false;
  }
  $( "#overlay" ).show();
  if(confirm("Wollen Sie die ausgewählten Attribute wirklich löschen?") == false) {
    $( "#overlay" ).hide();
    return false;
  }
  $( "html" ).css("cursor: wait");
  document.pocPostData = {
    action: "deleteAttributes",
    selection: new Array()
  };
  $( ".selectionAttributes:checked" ).each( function() { document.pocPostData.selection.push($( this ).val()); } );
  $.post("<?PHP $u = new pocPath('./ajax'); echo $u->url; ?>", document.pocPostData,
    function(data) {
      if(data)
        alert(data);
      window.location.href = "<?PHP $u = new pocPath('.', array("poc" => $thePoc->path)); echo $u->url; ?>";
    }
  );
}

// dialog

function pocShowDialog(dialogDivId) {
  if (document.pocDialog)
    return false;
  if (document.pocIsDirty) {
    if(confirm("Ungesicherte Änderungen!\nWollen Sie die Seite verlassen und die Änderungen verlieren?") == false)
      return false;
  }
  var dialogDiv = $( "#" + dialogDivId );
  if (dialogDiv.length == 1) {
    $( "#overlay" ).show();
    dialogDiv.show();
    dialogDiv.each( function() { this.pocMount(); });
    document.pocDialog = dialogDiv;
    $( "#theForm" ).prop("disabled", true);
    $( ".mainInput" ).each( function() {
        $( this ).prop("disabled", true);
      }
    );
  } else {
    alert("Dialog not found: '" + dialogDivId + "'");
  }
  return false;
}

function pocHideDialog() {
  $( "#overlay" ).hide();
  if (document.pocDialog)
    document.pocDialog.hide();
  document.pocDialog = null;
  $( "#theForm" ).prop("disabled", false);
  $( ".mainInput" ).each( function() {
      $( this ).prop("disabled", false);
    }
  );
}

function pocSumbitForDialog(dialogUrl) {
  if (document.pocIsDirty) {
    if(confirm("Ungesicherte Änderungen!\nWollen Sie die Seite verlassen und die Änderungen verlieren?") == false)
      return false;
  }
  
  return false;
}

// log

function pocShowLog() {
  $( "#pocLog" ).show();
  return false;
}

function pocHideLog() {
  $( "#pocLog" ).hide();
  return false;
}

////////////////////////////////////////////////////////////////////////////////

// on load

$( function() {

    // hide log
    $( "#pocLog" ).hide();

    // hide dialog
    $( "#overlay" ).hide();
    $( ".dialogBox" ).hide();

    // show correct tab
    if ($( ".switchedDiv" ).length > 0) {
      var r = /pocRememberTab=(\w+):(\w+);/;
      if (document.cookie && r.test(document.cookie)) {
        r = r.exec(document.cookie);
        pocSwitchTab(r[1], r[2]);
      } else {
        pocSwitchTab("contentDiv", "contentButton");
      }
    }
    document.pocDialog = null;

    // prepare input
    $( ".pocInput" ).each(
      function() {
        this.pocSaveContent = $( this ).val();
        this.pocCheckDirty = function() {
          return this.pocSaveContent != $( this ).val();
        };
        this.onchange = function() { pocCheckDirty(); };
      }
    );
    pocCheckDirty();
    $( ".selection" ).each(function() {
        this.onchange = pocCheckSelection;
      });
    pocCheckSelection();

    // onsubmit
    $( "#theForm" ).submit(function( event ) {
        event.preventDefault();
        pocSaveChanges();
      }
    );
    
    // fix textarea
    $( "#contentArea" ).width($( "#contentDiv" ).innerWidth());
    $( "#contentArea" ).height($( "#contentDiv" ).innerHeight());

    // leave page
    window.onbeforeunload = function() {
      if (document.pocIsDirty)
        return "Ungesicherte Änderungen!\nWollen Sie die Seite verlassen?";
    };

    window.onresize = function() {
      if (document.pocCKactive) {
        var o = $( "#contentDiv" );
        CKEDITOR.instances.contentArea.resize(o.innerWidth(), o.innerHeight());
      }
    };

document.pocCKactive = false;
<?PHP

# show errors

foreach (pocError::fetchAll() as $error)
  echo "    window.alert('" . addslashes($error->brief()) . "');" . PHP_EOL;

# init editor

if (!$thePoc->content || (!strpos(" $thePoc->content", '<?PHP') && (strpos($thePoc->content, '</') || strpos($thePoc->content, '/>')))) {

?>

    var ck = CKEDITOR.replace( 'contentArea', {
        filebrowserBrowseUrl: 'poc.php/usr/bin/filemanager/CKEditor',
        filebrowserWindowWidth: '640',
        filebrowserWindowHeight: '480',
        autoGrow_onStartup: 'true',
        height: $( "#contentDiv" ).innerHeight() - 104
      }
    );
    CKEDITOR.instances.contentArea.on("change", function () { pocCheckDirty(); });
    document.pocCKactive = true;

<?PHP

}

?>

    // init pocDialogNew
    $( "#pocDialogNew" ).each( function () {
        this.pocMount = function() { };
        $( this ).find( "form" ).submit( function(event) {
            event.preventDefault();
            $( "html" ).css("cursor: wait");
            document.pocPostData = {
              action: 'new',
              poc: '<?PHP echo $thePoc->path; ?>',
              name: $( "#newName" ).val(),
              title: $( "#newTitle" ).val(),
              content: $( "#newContent" ).val(),
              mode: 0
            };
            $( "input[name^='newMode']:checked" ).each( function() { document.pocPostData.mode += parseInt($( this ).val()); } );
            $.post('<?PHP $u = new pocPath("./ajax"); echo $u->url; ?>', document.pocPostData).done( function(data) {
                if (data)
                  alert(data);
                window.location.href = '<?PHP $u = new pocPath(".", array("poc" => $thePoc->path)); echo $u->url; ?>';
              }
            );
          }
        );
      }
    );

    // init pocDialogCopy
    $( "#pocDialogCopy" ).each( function () {
        this.pocMount = function() {
          $( this ).find( "#showSelectedPocs" ).html( pocSelectionToText() );
          $( this ).find( ".pocSelector" ).each( function() { pocWidgetPocSelector(this); } );
          $( this ).find( "form" ).submit( function(event) {
              event.preventDefault();
              $( "html" ).css("cursor: wait");
              document.pocPostData = {
                action: 'copy',
                poc: '<?PHP echo $thePoc->path; ?>',
                destination: $( this ).find( "input[type='hidden']" ).val(),
                selection: new Array()
              };
              $( ".selection:checked" ).each( function() { document.pocPostData.selection.push($( this ).val()); } );
              $.post('<?PHP $u = new pocPath("./ajax"); echo $u->url; ?>', document.pocPostData).done( function(data) {
                  if (data)
                    alert(data);
                  window.location.href = '<?PHP $u = new pocPath(".", array("poc" => "")); echo $u->url; ?>' + document.pocPostData.destination;
                }
              );
            }
          );
        };
      }
    );

    // init pocDialogMove
    $( "#pocDialogMove" ).each( function () {
        this.pocMount = function() {
          $( this ).find( "#showSelectedPocs" ).html( pocSelectionToText() );
          $( this ).find( ".pocSelector" ).each( function() { pocWidgetPocSelector(this); } );
          $( this ).find( "form" ).submit( function(event) {
              event.preventDefault();
              $( "html" ).css("cursor: wait");
              document.pocPostData = {
                action: 'move',
                poc: '<?PHP echo $thePoc->path; ?>',
                destination: $( this ).find( "input[type='hidden']" ).val(),
                selection: new Array()
              };
              $( ".selection:checked" ).each( function() { document.pocPostData.selection.push($( this ).val()); } );
              $.post('<?PHP $u = new pocPath("./ajax"); echo $u->url; ?>', document.pocPostData).done( function(data) {
                  if (data)
                    alert(data);
                  window.location.href = '<?PHP $u = new pocPath(".", array("poc" => "")); echo $u->url; ?>' + document.pocPostData.destination;
                }
              );
            }
          );
        };
      }
    );

    // init pocDialogUser
    $( "#pocDialogUser" ).each( function () {
        this.pocMount = function() { };
        $( this ).find( "form" ).submit( function(event) {
            event.preventDefault();
            $( "html" ).css("cursor: wait");
            document.pocPostData = {
              action: 'chown',
              poc: '<?PHP echo $thePoc->path; ?>',
              user: $( "#newUser" ).val(),
              group: $( "#newGroup" ).val(),
              recursive: 0
            };
            $( ".ugRecursive:checked" ).each(function() { document.pocPostData.recursive = 1; } );
            $.post('<?PHP $u = new pocPath("./ajax"); echo $u->url; ?>', document.pocPostData).done( function(data) {
                if (data)
                  alert(data);
                window.location.href = '<?PHP $u = new pocPath(".", array("poc" => $thePoc->path)); echo $u->url; ?>';
              }
            );
          }
        );
      }
    );

    // init pocDialogPrivs
    $( "#pocDialogPrivs" ).each( function () {
        this.pocMount = function() { };
        $( this ).find( "form" ).submit( function(event) {
            event.preventDefault();
            $( "html" ).css("cursor: wait");
            document.pocPostData = {
              action: 'chmod',
              poc: '<?PHP echo $thePoc->path; ?>',
              userPrivs: 0,
              groupPrivs: 0,
              otherPrivs: 0,
              recursive: 0
            };
            $( ".userPriv:checked" ).each(function() { document.pocPostData.userPrivs += parseInt($( this ).val()); } );
            $( ".groupPriv:checked" ).each(function() { document.pocPostData.groupPrivs += parseInt($( this ).val()); } );
            $( ".otherPriv:checked" ).each(function() { document.pocPostData.otherPrivs += parseInt($( this ).val()); } );
            $( ".privsRecursive:checked" ).each(function() { document.pocPostData.recursive = 1; } );
            $.post('<?PHP $u = new pocPath("./ajax"); echo $u->url; ?>', document.pocPostData).done( function(data) {
                if (data)
                  alert(data);
                window.location.href = '<?PHP $u = new pocPath(".", array("poc" => $thePoc->path)); echo $u->url; ?>';
              }
            );
          }
        );
      }
    );

    // init dialogNewAttribute
    $( "#dialogNewAttribute" ).each( function () {
        this.pocMount = function() {
          $( "#newAttributeClassDiv" ).html( $( "#newAttributeClass" ).val() );
        };
        $( this ).find( "form" ).submit( function(event) {
            event.preventDefault();
            $( "html" ).css("cursor: wait");
            document.pocPostData = {
              action: 'newAttribute',
              poc: '<?PHP echo $thePoc->path; ?>',
              class: $( "#newAttributeClassDiv" ).html(),
              name: $( "#newAttributeName" ).val(),
              title: $( "#newAttributeTitle" ).val(),
              content: $( "#newAttributeContent" ).val(),
              debit: $( "#newAttributeDebit" ).val(),
              voucher: $( "#newAttributeVoucher" ).val(),
              value: $( "#newAttributeValue" ).val()
            };
            $.post('<?PHP $u = new pocPath("./ajax"); echo $u->url; ?>', document.pocPostData).done( function(data) {
                if (data)
                  alert(data);
                window.location.href = '<?PHP $u = new pocPath(".", array("poc" => $thePoc->path)); echo $u->url; ?>';
              }
            );
          }
        );
      }
    );

} );

////////////////////////////////////////////////////////////////////////////////

// poc js widgets

function pocWidgetPocSelector(container) {
  var hiddenInput = $( container ).find( "input[type='hidden']" ).detach();
  var pocPath = hiddenInput.val();
  $( container ).empty();
  $( container ).append(hiddenInput);
  pocAjaxSelect(container, pocPath);
}

function pocAjaxSelect(container, pocPath) {
  document.pocAjaxResultContainer = container;
  $.post('<?PHP $u = new pocPath("./ajax"); echo $u->url; ?>', { action: "selectPoc", poc: pocPath }).done( function(data) {
      $( document.pocAjaxResultContainer ).append(data);
      $( document.pocAjaxResultContainer ).find( "a" ).each( function() {
          this.pocAjaxResultContainer = document.pocAjaxResultContainer;
          this.onclick = function() {
            $( this.pocAjaxResultContainer ).find( "input[type='hidden']" ).val(this.title);
            pocWidgetPocSelector(this.pocAjaxResultContainer);
            return false;
          }
        }
      );
      document.pocAjaxResultContainer = null;
    }
  );
}

