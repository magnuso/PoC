<?PHP

pocEnv::header();

try {

  switch (pocEnv::$request["action"]) {

    case "update": # save changes
      pocError::fetch("PoC-Ajax: save changes");
      $psToSave = array();
      foreach(pocEnv::$request as $toSave => $data) {
        $matches = array();
        if (preg_match('/(\w+):(\w+):?(\w*)/', $toSave, $matches)) {
          if ($toSave = pocRecord::open("$matches[1]:$matches[2]")) {
            $prop = $matches[3] ? $matches[3] : "content";
            $toSave->$prop = $data;
            $psToSave[$toSave->identifier] = $toSave;
          }
        }
      }
      foreach ($psToSave as $p)
        $p->update();
      break;

    case "selectPoc": # save changes
      pocError::fetch("PoC-Ajax: selectPoc");
      if (!$thePoc = poc::open(pocEnv::$request["poc"]))
        return;
      $path = new pocPath($thePoc->path);
      $pp = pocTag::create("  p  " . PHP_EOL);
      $slash = "";
      foreach($path as $p) {
        $pp->push($slash);
        $pp->push(pocTag::create("a", $p->name ? $p->name : "...", array("href" => "#", "title" => $p->path)));
        $slash = "/";
      }
      $pp->run();
      $table = pocTag::create("  table  " . PHP_EOL, NULL, array("cellspacing" => 0, "width" => "100%"));
      foreach ($thePoc->select(1, 0) as $p) {
        $tr = pocTag::create("    tr    " . PHP_EOL);
        $tr->push(pocTag::create("      td      " . PHP_EOL, pocTag::create("a", $p->name, array("href" => "#", "title" => $p->path)), array("width" => "80%")));
        $tr->push(pocTag::create("      td      " . PHP_EOL, pocTag::create("a", $p->title, array("href" => "#", "title" => $p->path))));
        $table->push($tr);
      }
      $table->run();
      break;

    case "copy": # copy pocs
      pocError::fetch("PoC-Ajax: copy");
      foreach (pocEnv::$request["selection"] as $p) {
        if ($p = poc::open($p))
          $p->copy(pocEnv::$request["destination"]);
      }
      break;

    case "move": # move pocs
      pocError::fetch("PoC-Ajax: move");
      foreach (pocEnv::$request["selection"] as $p) {
        if ($p = poc::open($p))
          $p->move(pocEnv::$request["destination"]);
      }
      break;

    case "delete": # delete pocs
      pocError::fetch("PoC-Ajax: delete");
      foreach (pocEnv::$request["selection"] as $p) {
        if ($p = poc::open($p))
          $p->delete();
      }
      break;

    case "new": # new poc
      pocError::fetch("PoC-Ajax: new");
      if (!$thePoc = poc::open(pocEnv::$request["poc"]))
        break;
      $p = poc::open();
      $p->title = pocEnv::$request["title"];
      $p->content = pocEnv::$request["content"];
      $p->mode = pocEnv::$request["mode"];
      $p->insert("$thePoc->path/" . pocEnv::$request["name"]);
      break;

    case "new": # new poc
      pocError::fetch("PoC-Ajax: new");
      if (!$thePoc = poc::open(pocEnv::$request["poc"]))
        break;
      $p = poc::open();
      $p->title = pocEnv::$request["title"];
      $p->content = pocEnv::$request["content"];
      $p->mode = pocEnv::$request["mode"];
      $p->insert("$thePoc->path/" . pocEnv::$request["name"]);
      break;

    case "chown": # chown
      pocError::fetch("PoC-Ajax: chown");
      if (!$thePoc = poc::open(pocEnv::$request["poc"]))
        break;    
      $thePoc->chown(pocEnv::$request["user"], pocEnv::$request["group"], pocEnv::$request["recursive"]);
      break;

    case "chmod": # chmod
      pocError::fetch("PoC-Ajax: chmod");
      if (!$thePoc = poc::open(pocEnv::$request["poc"]))
        break;    
      $thePoc->chmod(pocEnv::$request["userPrivs"], pocEnv::$request["groupPrivs"], pocEnv::$request["otherPrivs"], pocEnv::$request["recursive"]);
      break;

    case "newAttribute": # newAttribute
      pocError::fetch("PoC-Ajax: newAttribute");
      $class = pocEnv::$request["class"];
      if (!$thePoc = poc::open(pocEnv::$request["poc"])) {
        pocError::create(404, "Not Found", "PoC-Edit/ajax credit.");
        break;
      }
      $newAttribute = $class::create(pocEnv::$request["name"], pocEnv::$request["title"], pocEnv::$request["content"], pocEnv::$request["value"]);
      if ($debit = pocEnv::$request["debit"]) {
        if ($debit = poc::open($debit)) {
          $newAttribute->debit = $debit;
        } else {
          pocError::create(404, "Not Found", "PoC-Edit/ajax debit.");
          break;
        }
      }
      if ($voucher = pocEnv::$request["voucher"]) {
        if ($voucher = poc::open($voucher)) {
          $newAttribute->voucher = $voucher;
        } else {
          pocError::create(404, "Not Found", "PoC-Edit/ajax voucher.");
          break;
        }
      }
      $thePoc[] = $newAttribute;
      break;

    case "deleteAttributes": # delete pocs
      pocError::fetch("PoC-Ajax: delete");
      foreach (pocEnv::$request["selection"] as $a) {
        if ($a = pocRecord::open($a))
          $a->delete();
      }
      break;

    default:
      pocError::create(400, "Bad Request", "PoC-Edit/ajax action '" . pocEnv::$request["action"] . "' not found.");
      break;
  
  }

} catch (Exception $e) {
  pocError::create(400, "Bad Request", "Ajax caught '$e'");
}

echo implode(PHP_EOL, pocError::fetchAll());

?>